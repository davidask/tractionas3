/** * @version 1.0 * @author David Dahlstroem | daviddahlstroem.com *  *  * Copyright (c) 2009 David Dahlstroem | daviddahlstroem.com *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.utils {	import flash.display.DisplayObject;	import flash.geom.Rectangle;	public class DisplayObjectUtil 	{		public static function resizeAndMaintainAspectRatio(target:DisplayObject, width:Number, height:Number, aspectRatio:Number = NaN):void		{			var c:Number = !isNaN(aspectRatio) ? aspectRatio : target.width / target.height;			var b:Number = width / height;						if(c < b)			{				target.width = Math.floor(height * c);				target.height = height;			}			else			{				target.width = width;				target.height = Math.floor(width / c);			}		}

		public static function centerOnParent(target:DisplayObject):void		{			if(!target.parent) return;						target.x = target.parent.width >> 1 - target.width >> 1;						target.y = target.parent.height >> 1 - target.height >> 1;		}

		public static function centerOnStage(target:DisplayObject):void		{			if(!target.stage) return;						target.x = StageUtil.centerX(target.stage) - target.width >> 1;						target.y = StageUtil.centerY(target.stage) - target.height >> 1;		}

		public static function duplicate(target:DisplayObject):DisplayObject		{			var targetClass:Class = Object(target).constructor as Class;						var duplicate:DisplayObject = new targetClass();	        			duplicate.transform = target.transform;	        			duplicate.filters = target.filters;	        			duplicate.cacheAsBitmap = target.cacheAsBitmap;	        			duplicate.opaqueBackground = target.opaqueBackground;	        			if (target.scale9Grid)			{				var rect:Rectangle = target.scale9Grid;	            				duplicate.scale9Grid = rect;			}				return duplicate;		}	}}