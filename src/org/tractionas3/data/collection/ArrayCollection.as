/** * @version 1.0 * @author David Dahlstroem | daviddahlstroem.com *  *  * Copyright (c) 2009 David Dahlstroem | daviddahlstroem.com *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.data.collection {	import org.tractionas3.core.CoreObject;	import org.tractionas3.core.Destructor;	import org.tractionas3.data.collection.ICollection;	import org.tractionas3.data.iterator.ArrayIterator;	import org.tractionas3.data.iterator.IIterator;	import org.tractionas3.reflection.stringify;	/**	 * ArrayCollection is a collection using an array to store collection items.	 */	public class ArrayCollection extends CoreObject implements ICollection 	{		/** @private */		protected var _array:Array;				/**		 * Creates a new ArrayCollection object.		 */		public function ArrayCollection(array:Array = null)		{						if(!array) array = new Array();						_array = array.concat();		}		/**		 * @inheritDoc		 */		public function clear():void 		{			_array = [];		}		/**		 * @inheritDoc		 */		public function addItem(value:*):*		{			_array.push(value);						return value;		}		/**		 * @inheritDoc		 */		public function removeItem(value:*):void		{			_array.splice(getItemIndex(value), 1);		}		/**		 * @inheritDoc		 */		public function getItemAt(index:uint):*		{			return _array[index];		}		/**		 * @inheritDoc		 */		public function removeItemAt(index:uint):void		{			removeItem(getItemAt(index));		}		/**		 * @inheritDoc		 */		public function getItemIndex(value:*):uint		{			return _array.indexOf(value);		}		/**		 * @inheritDoc		 */		public function hasItem(value:*):Boolean		{			return (_array.indexOf(value) > -1);		}		/**		 * @inheritDoc		 */		override public function destruct(deepDestruct:Boolean = false):void		{			if(deepDestruct) Destructor.destructMultiple(_array);						clear();						_array = null;						super.destruct(deepDestruct);		}		/**		 * Returns a string representation of the collection.		 */		override public function toString():String		{			return stringify(this);		}		/**		 * @inheritDoc		 */		public function get count():uint		{			return _array.length;		}		/**		 * @inheritDoc		 */		public function get isEmpty():Boolean		{			return (_array.length <= 0);		}		/**		 * Returns a new iterator for the collection		 * 		 * @return new instance of ArrayIterator		 * @see org.tractionas3.data.iterator.ArrayIterator		 */		public function getIterator():IIterator		{			return new ArrayIterator(_array);		}	}}