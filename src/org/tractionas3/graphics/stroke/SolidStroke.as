/** * @version 1.0 * @author David A *  *  * Copyright (c) 2009 David A *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.graphics.stroke {	import org.tractionas3.core.interfaces.ICoreInterface;	import org.tractionas3.geom.Dimension;	import org.tractionas3.graphics.Solid;	import flash.display.Graphics;	/**	 * SolidStroke applies a solid stroke to a Graphics object.	 */	public class SolidStroke extends Solid implements ICoreInterface, IStroke	{		/**		 * Specifies whether pixel hinting is to be applied to the solid stroke.		 */		public var pixelHinting:Boolean;		/**		 * Specifies the scale mode of the solid stroke		 */		public var scaleMode:String;		/**		 * Specifies the caps style of the solid stroke.		 */		public var caps:String;		/**		 * Specifies the joints style of the solid stroke.		 */		public var joints:String;		/**		 * Specifies the miter limit of the solid stroke.		 */		public var miterLimit:Number;		private var _weight:Number;		/**		 * Creates a new SolidStroke object.		 * 		 * @param lineWeight The weight of the stroke.		 * @param lineColor The color of the stroke.		 * @param lineAlpha The alpha of the stroke.		 */		public function SolidStroke(lineWeight:Number, lineColor:uint, lineAlpha:Number)		{			weight = lineWeight;						color = lineColor;						alpha = lineAlpha;						pixelHinting = false;						scaleMode = "normal";						caps = null;						joints = null;						miterLimit = 3;		}		/**		 * @inheritDoc		 */		public function get weight():Number		{			return _weight;		}		public function set weight(value:Number):void		{			_weight = value;		}		/**		 * @inheritDoc		 */		public function apply(graphics:Graphics, gradientDimension:Dimension = null):void		{			graphics.lineStyle(weight, color, alpha, pixelHinting, scaleMode, caps, joints, miterLimit);		}	}}