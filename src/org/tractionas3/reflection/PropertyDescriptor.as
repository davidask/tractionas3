/** * @version 1.0 * @author David Dahlstroem | daviddahlstroem.com *  *  * Copyright (c) 2009 David Dahlstroem | daviddahlstroem.com *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.reflection{	import org.tractionas3.core.CoreObject;	import org.tractionas3.core.interfaces.CoreInterface;	/**	 * PropertyDescriptor describes a property of a class	 */	public class PropertyDescriptor extends CoreObject implements CoreInterface	{		/**		 * String definition for read-only properties		 */		public static const READ_ONLY:String = "readonly";		/**		 * String definition for write-only properties		 */		public static const WRITE_ONLY:String = "writeonly";		/**		 * String definition for read and write properties		 */		public static const READ_WRITE:String = "readwrite";		/**		 * Property name		 */		public var name:String;		/**		 * Property type		 */		public var type:Class;		/**		 * Property type name		 */		public var typeName:String;				/**		 * PropertyDescriptor constructor		 */				/**		 * Specifies the property access		 */		public var access:String;				public function PropertyDescriptor():void		{			super();		}		/**		 * Indicates whether the property is readable		 */		public function get readable():Boolean		{			return (access == READ_ONLY || access == READ_WRITE);		}		/**		 * Indicates whether the propety is writable		 */		public function get writable():Boolean		{			return (access == WRITE_ONLY || access == READ_WRITE);		}		/**		 * @inheritDoc		 */		override public function destruct(deepDestruct:Boolean = false):void		{			name = null;						type = null;						access = null;		}	}}