/** * @version 1.0 * @author David Dahlstroem | daviddahlstroem.com *  *  * Copyright (c) 2009 David Dahlstroem | daviddahlstroem.com *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.events {	import flash.display.Sprite;	import flash.events.Event;	/**	 * EnterFrame allows you to call functions every frame, without adding a new event listener to objects.	 */		public class EnterFrame	{		private static var _instance:EnterFrame;		private var enterFrameInstance:Sprite;		private var functions:Array = [];				private var running:Boolean;				private var manuallyStopped:Boolean;				/**		 * @private		 */				public function EnterFrame(singletonEnforcer:SingletonEnforcer = null)		{			super();						if(!singletonEnforcer)			{				throw new ArgumentError("EnterFrame is a singleton class and may only be accessed via its accessor method getInstance()."); 			}						enterFrameInstance = new Sprite();						running = false;						manuallyStopped = false;		}				/**		 * Adds an enter frame handler to the EnterFrame class.		 */				public static function addEnterFrameHandler(handler:Function):void		{				if(!getInstance().running && !getInstance().manuallyStopped)			{				start();			}						getInstance().functions.push(handler);		}				/**		 * Removes an enter frame handler to the EnterFrame class.		 */		public static function removeEnterFrameHandler(handler:Function):void		{			for(var i:int = 0;i < getInstance().functions.length; ++i)			{				if(getInstance().functions[i] === handler)				{					getInstance().functions.splice(i, 1);					break;					return;				}			}		}				/**		 * EnterFrame accessor.		 */				public static function getInstance():EnterFrame 		{			if(_instance == null) _instance = new EnterFrame(new SingletonEnforcer());			return _instance;		}				/**		 * Starts rendering of the enter frame handlers.		 * Starts automatically.		 */				public static function start():void		{			if(getInstance().running) return;						if(getInstance().enterFrameInstance.hasEventListener(Event.ENTER_FRAME)) return;						getInstance().enterFrameInstance.addEventListener(Event.ENTER_FRAME, render);						getInstance().running = true;		}				/**		 * Stops rendering of the enter frame handlers.		 */				public static function stop():void		{			if(!getInstance().running) return;						getInstance().enterFrameInstance.removeEventListener(Event.ENTER_FRAME, render);						getInstance().running = false;						getInstance().manuallyStopped = true;		}		/**		 * Clears the EnterFrame class of all handlers.		 */		public static function clear():void		{				_instance = null;						getInstance().enterFrameInstance = null;						getInstance().functions = null;		}				private static function render(e:Event):void		{			var f:Function;						for(var i:int = 0;i < getInstance().functions.length; ++i)			{				f = getInstance().functions[i] as Function;								f.call();			}		}	}}internal class SingletonEnforcer {}