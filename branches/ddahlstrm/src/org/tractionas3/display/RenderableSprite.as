/** * @version 1.0 * @author David Dahlstroem | daviddahlstroem.com *  *  * Copyright (c) 2009 David Dahlstroem | daviddahlstroem.com *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.display {	import org.tractionas3.core.interfaces.ICoreInterface;	import org.tractionas3.core.interfaces.IRenderable;	import org.tractionas3.display.CoreSprite;	import org.tractionas3.events.EnterFrame;	/**	 * RenderableSprite executes its own <code>render()</code> method every frame.	 * RenderableSprite must be extended and overriding its <code>render()</code> to implement functionality.	 */
	public class RenderableSprite extends CoreSprite implements IRenderable, ICoreInterface 	{		/**		 * Creates a new RenderableSprite object.		 */
		public function RenderableSprite()		{			super();		}
		/**		 * Starts rendering of the RenderableSprite every frame.		 */
		public function startRender():void		{			if(!EnterFrame.hasEnterFrameHandler(render)) EnterFrame.addEnterFrameHandler(render);		}
		/**		 * Stops rendering of the RenderableSprite.		 */
		public function stopRender():void		{			EnterFrame.removeEnterFrameHandler(render);			}		/**		 * Indicates whether the renderable sprite is currently rendering.		 */		public function get rendering():Boolean		{			return EnterFrame.hasEnterFrameHandler(render);		}		/**		 * Renders the RenderableSprite.		 * <p />		 * By default this method is executed every frame if the MotionSprite is currently in the		 * display list. However, if manually stopped using <code>stopRender()</code>, it will not start		 * rendering automatically when added to the display list after being previously removed.		 */		public function render():void		{			return;		}
		/**		 * @inheritDoc		 */
		override public function destruct(deepDestruct:Boolean = false):void		{			stopRender();						super.destruct(deepDestruct);		}	}}