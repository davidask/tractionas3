/** * @version 1.0 * @author David A *  *  * Copyright (c) 2009 David A *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.net {	import org.tractionas3.core.interfaces.ICallable;	import org.tractionas3.core.interfaces.ICoreInterface;	import org.tractionas3.events.ServiceEvent;	import org.tractionas3.events.WeakEventDispatcher;	/**	 * Service provides a base class for remote services.	 */	public class Service extends WeakEventDispatcher implements ICoreInterface, ICallable 	{		public function Service()		{			super();		}		/**		 * @inheritDoc		 */		override public function destruct(deepDestruct:Boolean = false):void		{			super.destruct();		}		/**		 * Executes the service.		 */		public function call(...arguments:Array):Boolean		{			return false;		}		/**		 * Handler for service results.		 * Override for extendablity.		 */		protected function onServiceResult(result:Object):void		{			var			resultEvent:ServiceEvent = new ServiceEvent(ServiceEvent.RESULT);			resultEvent.result = result;						dispatchEvent(resultEvent);						destruct();		}		/**		 * Handler for service faults.		 * Override for extendablity.		 */		protected function onServiceFault(info:Object):void		{			if(hasEventListener(ServiceEvent.FAULT))			{				var				faultEvent:ServiceEvent = new ServiceEvent(ServiceEvent.FAULT);								var errorCode:String;								for each(var property:String in info)				{					errorCode += property + "\n";				}								faultEvent.errorCode = errorCode;								dispatchEvent(faultEvent);			}			else			{				throw new Error(info.toString());			}						destruct();		}	}}