/** * @version 1.0 * @author David Dahlstroem | daviddahlstroem.com *  *  * Copyright (c) 2009 David Dahlstroem | daviddahlstroem.com *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.net.amf {	import org.tractionas3.core.interfaces.ICoreInterface;	import org.tractionas3.net.Service;	import flash.net.NetConnection;	import flash.net.Responder;	/**	 * AMFService is used for AMF format services such as AMFPHP.	 */	public class AMFService extends Service implements ICoreInterface 	{		private var _netConnection:NetConnection;		private var _gateway:String;		private var _service:String;		private var _objectEncoding:uint;				/**		 * Creates a new AMFService object.		 * 		 * @param gateway AMF Servive gateway.		 * @param service Service name.		 * @param objectEncoding Object encoding.		 */		public function AMFService(gateway:String, service:String, objectEncoding:uint = 0)		{			super();						_gateway = gateway;						_service = service;						_objectEncoding = objectEncoding;						_netConnection = new NetConnection();						_netConnection.connect(_gateway);		}		/**		 * @inheritDoc		 */		override public function call(...arguments:Array):Boolean		{			var responder:Responder = new Responder(onServiceResult, onServiceFault);						var			execArgs:Array = [_service, responder];			execArgs.concat(arguments);						_netConnection.call.apply(_netConnection, execArgs);						return true;		}		/**		 * @inheritDoc		 */		override public function destruct(deepDestruct:Boolean = false):void		{			_netConnection.close();						_netConnection = null;						_service = null;						super.destruct(deepDestruct);		}	}}