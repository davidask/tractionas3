/** * @version 1.0 * @author David Dahlstroem | daviddahlstroem.com *  *  * Copyright (c) 2009 David Dahlstroem | daviddahlstroem.com *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.load.loaders{	import org.tractionas3.core.interfaces.ICancelable;	import org.tractionas3.core.interfaces.ICloneable;	import org.tractionas3.load.ILoadable;	import org.tractionas3.load.IUnloadable;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	/**	 * URLDataLoader provides a standard API loader for loading data from a URL.	 */	public class URLDataLoader extends LoaderCore implements ILoadable, ICancelable, IUnloadable	{		/** @private */		protected var _urlLoader:URLLoader;		/**		 * Creates a new URLDataLoader object.		 * 		 * @param url The URL from wich the data should be loaded.		 * @param loaderName Assigned name to the loader.		 * 		 */		public function URLDataLoader(url:String = null, loaderName:String = null)		{				super(url, loaderName);		}		/**		 * Cancels the loading process.		 * The <code>reset()</code> method must be called before calling the <code>load()</code> method again.		 */		public function cancel():void		{			var success:Boolean = true;						try			{				_urlLoader.close();			}			catch(e:Error)			{				success = false;			}						if(success) dispatchLoadCancelEvent();		}		/**		 * @inheritDoc		 */		override public function load(newURL:String = null):void		{			if(newURL) url = newURL;						_urlLoader.load(getURLRequest());		}		public function unload():void		{			reset();		}		/**		 * @inheritDoc		 */		override public function clone():ICloneable		{			var			loader:URLDataLoader = new URLDataLoader(url, name);						loader.dataFormat = dataFormat;						return loader;		}		/**		 * @inheritDoc		 */		override public function reset():void		{			super.reset();						if(_urlLoader)			{				setEventListeners(false);								cancel();								_urlLoader = null;			}						_urlLoader = new URLLoader();						_urlLoader.dataFormat = URLLoaderDataFormat.BINARY;						if(_byteReference)			{				_byteReference.destruct();							_byteReference = null;			}						_byteReference = new ByteReference(_urlLoader);						setEventListeners(true);		}		/**		 * @inheritDoc		 */		override public function destruct(deepDestruct:Boolean = false):void		{			cancel();						setEventListeners(false);						_byteReference.destruct();						_byteReference = null;						_urlLoader = null;						super.destruct(deepDestruct);		}		/**		 * Returns data from the loaded url.		 * @inheritDoc		 */		override public function get data():*		{			return _urlLoader.data;		}		/**		 * The data format of the URLDataLoader instance.		 * 		 * @see flash.net.URLLoaderDataFormat		 */		public function get dataFormat():String		{			return _urlLoader.dataFormat;		}		public function set dataFormat(value:String):void		{			_urlLoader.dataFormat = value;		}		private function setEventListeners(add:Boolean):void		{			var method:String = add ? "addEventListener" : "removeEventListener";						_urlLoader[method](Event.OPEN, dispatchLoadStartEvent);						_urlLoader[method](Event.COMPLETE, dispatchLoadCompleteEvent);						_urlLoader[method](ProgressEvent.PROGRESS, dispatchLoadProgressEvent);						_urlLoader[method](IOErrorEvent.IO_ERROR, dispatchIOErrorEvent);						_urlLoader[method](SecurityErrorEvent.SECURITY_ERROR, dispatchSecurityErrorEvent);		}	}}