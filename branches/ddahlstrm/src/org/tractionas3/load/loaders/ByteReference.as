/** * @version 1.0 * @author David A *  *  * Copyright (c) 2009 David A *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.load.loaders {	import org.tractionas3.core.CoreObject;	import org.tractionas3.core.interfaces.ICoreInterface;	/**	 * Byterefence is an internal class for the org.tractionas3.load package used to reference loaders load progress.	 */	final internal class ByteReference extends CoreObject implements ICoreInterface 	{		private static const BYTES_TOTAL:String = "bytesTotal";		private static const BYTES_LOADED:String = "bytesLoaded";		private var _target:Object;		/**		 * ByteReference Constructor		 */		public function ByteReference(referenceTarget:Object)		{			super();						_target = referenceTarget;		}		public function get target():Object		{			return _target;		}		internal function get bytesTotal():int		{			if(!verifyTarget()) return 0;						return _target[BYTES_TOTAL] as uint;		}		internal function get bytesLoaded():uint		{						if(!verifyTarget()) return 0;						return _target[BYTES_LOADED] as uint;		}		internal function get hasValidTarget():Boolean		{			if(_target == null) return false;						return (_target.hasOwnProperty(BYTES_LOADED) && _target.hasOwnProperty(BYTES_TOTAL));		}		override public function destruct(deepDestruct:Boolean = false):void		{			_target = null;						super.destruct(deepDestruct);		}		private function verifyTarget():Boolean		{				if(!_target)			{				return false;			}						if(!hasValidTarget)			{				return false;			}						return true;		}	}}