/** * @version 1.0 * @author David Dahlstroem | daviddahlstroem.com *  *  * Copyright (c) 2009 David Dahlstroem | daviddahlstroem.com *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.load{	import org.tractionas3.core.interfaces.ICancelable;	import org.tractionas3.core.interfaces.ICloneable;	import org.tractionas3.events.LoaderEvent;	import org.tractionas3.load.CoreLoader;	import org.tractionas3.load.ILoadable;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.media.Sound;	import flash.media.SoundLoaderContext;	/**	 * SoundLoader provides a standard API loader for loading sound.	 */	 	//TODO Implement indicator for id3 availability.	public class SoundLoader extends CoreLoader implements ILoadable, ICancelable	{		/**		 * Provides security checks for the SoundLoader class.		 * 		 * @see flash.media.SoundLoaderContext		 */		public var soundLoaderContext:SoundLoaderContext;		private var _sound:Sound;				/**		 * Creates a new SoundLoader object.		 * 		 * @param url The URL from wich the data should be loaded.		 * @param loaderName Assigned name to the loader.		 */		public function SoundLoader(url:String = null, loaderName:String = null)		{			super(url, loaderName);						reset();		}		/**		 * @inheritDoc		 */		override public function load(newURL:String = null):void		{			if(newURL) url = newURL;						_sound.load(getURLRequest(), soundLoaderContext);		}		/**		 * Cancels the loading process.		 * The <code>reset()</code> method must be called before calling the <code>load()</code> method again.		 */		public function cancel():void		{			var success:Boolean = true;						try			{				_sound.close();			}			catch(e:Error)			{				success = false;			}						if(success) dispatchLoadCancelEvent();		}		/**		 * @inheritDoc		 */		override public function clone():ICloneable		{			var			loader:SoundLoader = new SoundLoader(url, name);						loader.soundLoaderContext = soundLoaderContext;						return loader as CoreLoader;		}		/**		 * @inheritDoc		 */		override public function reset():void		{			if(_sound) destruct();						_sound = new Sound();						_byteReference = new ByteReference(_sound);						setEventListeners(true);		}		/**		 * @inheritDoc		 */		override public function destruct(deepDestruct:Boolean = false):void		{			cancel();						setEventListeners(false);						_byteReference.destruct();						_sound = null;						super.destruct(deepDestruct);		}		/**		 * Returns the loaded data as a sound object.		 * @inheritDoc		 */		override public function get data():*		{			return _sound;		}		private function setEventListeners(add:Boolean):void		{			var method:String = add ? "addEventListener" : "removeEventListener";						_sound[method](Event.OPEN, dispatchLoadStartEvent);						_sound[method](Event.COMPLETE, dispatchLoadCompleteEvent);						_sound[method](ProgressEvent.PROGRESS, dispatchLoadProgressEvent);						_sound[method](IOErrorEvent.IO_ERROR, dispatchIOErrorEvent);						_sound[method](Event.ID3, dispatchID3Event);		}		private function dispatchID3Event(e:Event):void		{			dispatchEvent(new LoaderEvent(LoaderEvent.ID3));		}	}}