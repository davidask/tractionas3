/** * @version 1.0 * @author David A *  *  * Copyright (c) 2009 David A *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.reflection{	import org.tractionas3.core.CoreObject;	import org.tractionas3.core.interfaces.ICoreInterface;	/**	 * MethodDescriptor describes a method of a class	 */	public class MethodDescriptor extends CoreObject implements ICoreInterface	{			/**		 * Method name		 */		public var name:String;		/**		 * The class that declares the method		 */		public var declaredBy:Class;		/**		 * Method return type		 */		public var returnType:Class;		/**		 * Method return type name		 */		public var returnTypeName:String;		/**		 * An array containing the method parameters		 */		public var parameters:Array;		/**		 * Returns a ParameterDescriptor discribing a method parameter with specified index.		 * Method index starts at zero.		 */		public function getParameterByIndex(index:int):ParameterDescriptor		{			return parameters[index] as ParameterDescriptor;		}		/**		 * @inheritDoc		 */		override public function destruct(deepDestruct:Boolean = false):void		{			name = null;						declaredBy = null;						returnType = null;						for(var i:int = 0;i < parameters.length;++i)			{				ParameterDescriptor(parameters[i]).destruct(deepDestruct);			}						parameters = null;		}	}}