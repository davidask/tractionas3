/** * @version 1.0 * @author David Dahlstroem | daviddahlstroem.com *  *  * Copyright (c) 2009 David Dahlstroem | daviddahlstroem.com *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.transitions {	import org.tractionas3.core.interfaces.Resetable;	import org.tractionas3.core.interfaces.Runnable;	import org.tractionas3.events.EnterFrame;	import org.tractionas3.events.TweenEvent;	import org.tractionas3.events.WeakEventDispatcher;	/**	 * Tween provides an extendable API base for creating value tweens.	 * 	 * <p />	 * Rather than changing property values of an object, Tween is independent and dispatches events indicating the tween progress.	 * Tween outputs on a value between two specified values (start value and end value), and this value can be used to represent a tween.	 */	public class Tween extends WeakEventDispatcher implements Resetable, Runnable	{		private var _equation:Function;		private var _startValue:Number;		private var _endValue:Number;		private var _duration:uint;		private var _currentTime:uint;		private var _running:Boolean;		private var _currentValue:Number;				/**		 * Tween constructor		 * 		 * @param easingEquation The easing equation used for the tween		 * @param startValue The starting value of the tween		 * @param endValue The end value of the tween		 * @param The duration, in frames, of the tween		 */		public function Tween(easingEquation:Function, startValue:Number, endValue:Number, duration:uint)		{			super();						_equation = easingEquation;						_startValue = startValue;						_currentValue = _startValue;						_endValue = endValue;						_duration = duration;						_running = false;		}		/**		 * Returns the start value of the tween		 */		public function get startValue():Number		{			return _startValue;		}		/**		 * Returns the end value of the tween.		 */		public function get endValue():Number		{			return _endValue;		}		/**		 * Returns the current value of the tween.		 */		public function get value():Number		{			return _currentValue;		}		/**		 * Returns the ease progress of the tween.		 */		public function get easeProgress():Number		{			return (_currentValue + 1) / (_endValue + 1);		}		/**		 * Returns the duration progress of the tween.		 */		public function get progress():Number		{			return _currentTime / _duration;		}		/**		 * Returns the duration of the tween.		 */		public function get duration():uint		{			return _duration;		}		/**		 * Starts the tween.		 */		public function start():void		{			if(running) return;						dispatchEvent(new TweenEvent(TweenEvent.START, value, easeProgress, progress));						EnterFrame.addEnterFrameHandler(renderMotionTween);						_running = true;		}		/**		 * Stops the tween.		 */		public function stop():void		{			if(!running) return;						dispatchEvent(new TweenEvent(TweenEvent.STOP, value, easeProgress, progress));						EnterFrame.removeEnterFrameHandler(renderMotionTween);						_running = false;		}		/**		 * Indicates whether the tween is currently running.		 */		public function get running():Boolean		{			return _running;			}		/**		 * Ends the tween, instantly applying the end value.		 */		public function end():void		{			_running = true;						_currentTime = duration;						_currentValue = endValue;						if(hasEventListener(TweenEvent.UPDATE)) dispatchEvent(new TweenEvent(TweenEvent.UPDATE, value, easeProgress, progress));						stop();		}		/**		 * Resets the tween instantly applying the start value.		 */		public function reset():void		{			stop();						_currentTime = 0;						_currentValue = startValue;						if(hasEventListener(TweenEvent.UPDATE)) dispatchEvent(new TweenEvent(TweenEvent.UPDATE, value, easeProgress, progress));		}		private function renderMotionTween():void		{				_currentValue = _equation.call(null, _currentTime, startValue, endValue - startValue, duration);						if(hasEventListener(TweenEvent.UPDATE)) dispatchEvent(new TweenEvent(TweenEvent.UPDATE, value, easeProgress, progress));						_currentTime++;						if(_currentTime > _duration)			{				stop();			}		}	}}