/** * @version 1.0 * @author David Dahlstroem | daviddahlstroem.com *  *  * Copyright (c) 2009 David Dahlstroem | daviddahlstroem.com *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.data.table {	import org.tractionas3.core.interfaces.ICoreInterface;	import org.tractionas3.core.interfaces.IResetable;	import org.tractionas3.data.table.DatatableRow;	/**	 * Data Table interface.	 */	public interface IDatatable extends ICoreInterface, IResetable	{		/**		 * Adds a field to the data table. A field is strictly type bound.		 * 		 * @param name Field name to be assigned as identifier.		 * @param dataType Data type for the field. A data type of a field cannot be changed.		 * @param primary Defines whether the field is the primary field of the data table.		 */		function addField(name:String, dataType:Class, primary:Boolean = false):DatatableField;		/**		 * Removes a field from the data table. All values associated with target field will be deleted.		 * 		 * @param name Field identifier.		 */		function removeField(name:String):void;		/**		 * Returns an array containing all the field identifiers.		 */		function getFieldNames():Array;		/**		 * Returns an array containing all the field data types.		 */		function getFieldDataTypes():Array;		/**		 * Returns the field index by its identifier.		 */		function getFieldIndexByName(name:String):int;		/**		 * Indicates whether the table hsa a primary field.		 */		function get hasPrimary():Boolean;		/**		 * Indicates the number of table fields.		 */		function get fieldCount():uint;		/**		 * Indicates the number of rows in the data table.		 */		function get rowCount():uint;		/**		 * Adds a new row to the table.		 * 		 * @param args Field values of the row. The row values must be in the same order as the fields.		 */		function addRow(...args:Array):void;		/**		 * Removes a row at specified index.		 */		function removeRowAt(index:uint):void;		/**		 * Removes rows containing a field value matching specified value.		 * 		 * @param fieldIdentifier Field index or identifier.		 * @param match Value to compare field values with.		 */		function removeRowsByMatch(fieldIdentifier:*, match:*):int;		/**		 * Returns a row at the index of the cursor.		 * 		 * @see #cursor		 */		function getRow():DatatableRow;		/**		 * Returns an array of rows containing a field value maching specified value.		 * 		 * @param fieldIdentifier Field index or identifier.		 * @param match Value to compare field values with.		 */		function getRowsByMatch(fieldIdentifier:*, match:*):Array;		/**		 * Returns a row at the specified index.		 */		function getRowAt(index:uint):DatatableRow;		/**		 * Returns the value of a field at a row index.		 * 		 * @param fieldIdentifier Field index or identifier.		 * @param rowIndex Row index.		 */		function getValue(fieldIdentifier:*, rowIndex:uint):*;		/**		 * Specifies whether the table contains a value in specified field.		 */		function hasValue(value:*, fieldIdentifier:*):Boolean;		/**		 * Returns the name of the data table.		 */		function get name():String;		/**		 * The table cursor location.		 */		function get cursor():uint;		/**		 * Specifies whether the cursor is at the last row index.		 */		function get EOF():Boolean;		/**		 * Specifies whether the cursor is at the first row index.		 */		function get BOF():Boolean;		/**		 * Moves the cursor to the next row index.		 */		function moveNext():void;		/**		 * Moves the cursor to the previous row index.		 */		function movePrevious():void;		/**		 * Moves the cursor to the fist row index.		 */		function moveFist():void;		/**		 * Moves the cursor to the last row index.		 */		function moveLast():void;	}}