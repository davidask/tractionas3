/** * @version 1.0 * @author David Dahlstroem | daviddahlstroem.com *  *  * Copyright (c) 2009 David Dahlstroem | daviddahlstroem.com *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.profiler {	import org.tractionas3.events.EnterFrame;	import flash.utils.getTimer;		/**	 * FPSProfiler is used to monitor the frame rate of a Flash application.	 */		public class FPSProfiler 	{				/** @private */		protected var _updateInterval:uint;				/** @private */		protected var _currentFPS:int;				/** @private */		protected var _averageFPS:int;		private var _frame:uint;		private var _lastRecord:uint;		private var _lastFrameRecord:uint;				/**		 * Creates a new FPSProfiler object.		 */				public function FPSProfiler(updateInterval:uint = 10)		{				_updateInterval = updateInterval;						_frame = 1;		}		public function start():void		{			_lastRecord = getTimer();						EnterFrame.addEnterFrameHandler(update);		}		public function stop():void		{			EnterFrame.removeEnterFrameHandler(update);		}		public function get currentFPS():int		{			return _currentFPS;		}		public function get averageFPS():int		{			return _averageFPS;		}		private function update():void		{			if(_frame % _updateInterval == 0)			{					var c:Number = Math.round((_frame - _lastFrameRecord) / (getTimer() - _lastRecord) * 1000);								_currentFPS = c;								_lastRecord = getTimer();								var a:Number = Math.round((_frame / (_lastRecord / 1000)));								_averageFPS = a;								_lastFrameRecord = _frame;			}						_frame++;		}	}}