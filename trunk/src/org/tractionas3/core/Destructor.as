/** * @version 1.0 * @author David Dahlstroem | daviddahlstroem.com *  *  * Copyright (c) 2009 David Dahlstroem | daviddahlstroem.com *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.core {	import org.tractionas3.core.interfaces.Destructable;	import org.tractionas3.debug.LogLevel;	import org.tractionas3.debug.log;	import flash.display.Graphics;	import flash.display.Shape;	import flash.display.Sprite;	/**	 * Destructor handles destruction of class instances implementing Destructable interface.	 * 	 * @see org.tractionas3.core.interfaces.Destructable	 */	public class Destructor 	{		/**		 * Destructs a destructable class instance.		 * See <i>Destructable interface</i> for more detailed information about this process.		 * 		 * @param target Target destrucable		 * @param deepDestruct Specifies whether a deep destruct is to be performed.		 * See the <code>Destructable</code> interface documentation for more info on deep destruct operation.  		 * 		 * @see org.tractionas3.core.interfaces.Destructable		 */		public static function destruct(target:Destructable, deepDestruct:Boolean = false):void 		{			var properties:Array = target.listDestructableProperties();							var propertyName:String;						for(var i:int = 0;i < properties.length; ++i)			{				propertyName = properties[i] as String;								destructProperty(target, propertyName, deepDestruct);			}		}		/**		 * Performs a destruct on all destructable instances in an array.		 * 		 * @param deepDestruct Specifies whether a deep destruct is to be performed.		 * See the <code>Destructable</code> interface documentation for more info on deep destruct operation.		 * 		 * @see #destruct()		 * @see org.tractionas3.core.interfaces.Destructable		 */		public static function destructMultiple(destructables:Array, deepDestruct:Boolean = false):void		{			var target:*;						for(var i:int = 0;i < destructables.length; ++i)			{				target = destructables[i];								if(target is Destructable) Destructable(target).destruct(deepDestruct);			}		}		private static function destructProperty(target:Destructable, propertyName:String, deepDestruct:Boolean):void		{						if(!target[propertyName]) return;						var property:* = target[propertyName];						if(property is Destructable && deepDestruct) Destructable(property).destruct(deepDestruct);						switch(true)			{				case property is Number:											target[propertyName] = NaN;										break;									case property is int:											target[propertyName] = 0;									break;									case property is uint:											target[propertyName] = 0;										break;									case property is Boolean:									target[propertyName] = false;												break;									case property is Graphics:										if(target is Shape)					{						Shape(target).graphics.clear();					}					else if(target is Sprite)					{						Sprite(target).graphics.clear();					}										break;									case property is Array:											if(deepDestruct)					{						var array:Array = target[propertyName] as Array;													if(!array) break; //Don't bother if the array is "special", like the filters array.						for(var i:int = 0; i < array.length; ++i)							{								if(array[i] is Destructable) Destructor.destruct(array[i], deepDestruct);							}					}																target[propertyName] = null;											break;										default:												try						{							target[propertyName] = null;														//TODO Dev purposes only							log("Nullified property:" + propertyName, LogLevel.TRACTIONAS3);					}						catch(e:Error)						{							//TODO Dev purposes only							log(e.message, LogLevel.TRACTIONAS3);						}											break;			}		}	}}