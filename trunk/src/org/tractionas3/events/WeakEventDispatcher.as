/** * @version 1.0 * @author David Dahlstroem | daviddahlstroem.com *  *  * Copyright (c) 2009 David Dahlstroem | daviddahlstroem.com *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * */package org.tractionas3.events {	import flash.events.Event;	import flash.events.IEventDispatcher;	/**	 * WeakEventDispatcher uses weak references by default.	 */	public class WeakEventDispatcher extends ClearableEventDispatcher implements IClearableEventDispatcher	{		/**		 * WeakEventDispatcher constructor		 */		public function WeakEventDispatcher(target:IEventDispatcher = null)		{			super(target);		}		/**		 * Dispatches an event into the event flow, <i>only</i> if event property <code>hasEventListener</code> or <code>bubbles</code> are <code>true</code>. 		 */		override public function dispatchEvent(e:Event):Boolean 		{			if(hasEventListener(e.type) || e.bubbles) 			{				return super.dispatchEvent(e);			}			return true;		}		/**		 * Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.		 * 		 * @param useWeakReference In WeakEventDispatcher class this param is set to <code>true</code> by default.		 */		override public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = true):void		{			super.addEventListener(type, listener, useCapture, priority, useWeakReference);		}	}}